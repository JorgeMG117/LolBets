name: CI Checks

on:
  push:
    branches: # <1>
      - master
jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v4
      with:
        go-version: ^1.17
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
    - name: Run Test
      run: make -C backend/ test
    - name: Coverage Check
      run: make -C backend/ coverage
    - name: Generate Report
      run: make -C backend/ report
    - name: Copy Files
      run: |
          mkdir reports
          cp backend/cover.html reports/.

    - name: Archive
      uses: actions/upload-artifact@v3
      with:
        name: reports
        path: reports

  build:
    name: Build App
    runs-on: ubuntu-latest #
    needs: test
    steps:

    - name: Set up Go 1.x #
      uses: actions/setup-go@v4
      with:
        go-version: ^1.17

    - name: Check out code into the Go module directory #
      uses: actions/checkout@v3

    - name: Build
      run: make -C backend/ build #

    - name: Copy Files #
      run: |
           mkdir  artifacts
           cp backend/backend artifacts/.

    - name: Archive #
      uses: actions/upload-artifact@v3
      with:
          name: backend #
          path: artifacts

  deliver:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download binary # <4>
        uses: actions/download-artifact@v2
        with:
          name: backend 
      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: false
      - name: Upload Release Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: backend
          asset_name: backend
          asset_content_type: application/octet-stream

  build-and-publish:
    name: Build and Publish Docker Image
    needs: test 
    runs-on: ubuntu-latest
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      # Builds the Docker image
      - name: Build the Docker image
        run: docker build -t jorgemg117/lolbets:dev backend/.

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Push Docker image
        run: docker push jorgemg117/lolbets:dev


  build-push-gcr:
    name: Build and Push to GCP
    runs-on: ubuntu-latest
    needs: build-and-publish
    env:
      IMAGE_NAME: jorgemg117/lolbets
      PROJECT_ID: micro-primer-401115
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - uses: google-github-actions/setup-gcloud@main
      with:
        service_account_key: ${{ secrets.GCP_CLOUD_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        #export_default_credentials: true

    - name: Build Docker Image
      run: docker build -t $IMAGE_NAME:latest backend/.

    - name: Configure Docker Client
      run: |-
        gcloud auth configure-docker --quiet
        echo ${{ secrets.GCP_CLOUD_KEY }} > key.json
        gcloud auth activate-service-account --key-file=key.json
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/$IMAGE_NAME:latest backend/.
        gcloud builds submit --tag gcr.io/${{ env.PROJECT_ID }}/$IMAGE_NAME:$GIT_TAG backend/.
        rm key.json

